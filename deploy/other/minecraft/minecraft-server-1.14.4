#!/bin/bash

#========== conf ==========#

XMS="512m"
XMX="1024m"
MAX_BAK_CNT=10
MCSRV_PATH=/root/project/minecraft-server-forge-1.14.4
MCSRV_JAR=minecraft-server-forge-1.14.4.jar
MCSRV_NAME=minecraft-server-forge-1.14.4
SCRIPT_VER=2021.03.01

#========== VAR ==========#

ORIGIN_URL=https://launcher.mojang.com/v1/objects/3dc3d84a581f14691199cf6831b71ed1296a9fdf/server.jar
FORGE_INSTALL_URL=https://files.minecraftforge.net/maven/net/minecraftforge/forge/1.14.4-28.2.0/forge-1.14.4-28.2.0-installer.jar

ORIGIN_JAR=minecraft_server.1.14.4.jar
FORGE_INSTALL_JAR=forge-1.14.4-28.2.0-installer.jar
FORGE_SERVER_JAR=forge-1.14.4-28.2.0.jar

#========== help ==========#

echo_help() {
    echo "Usage:"
    echo "    $0 [options...]"
    echo " -a, --attach         attach minecraft server screen"
    echo " -b, --backup         backup"
    echo "     --create-crontab create crontab for auto backup"
    echo "     --drop-caches    drop caches [use it careful]"
    echo "     --forge          install forge"
    echo " -h, --help           help"
    echo " -i, --init           init server"
    echo " -k, --kill           kill Minecraft server"
    echo " -l, --log <len>      tailf server log, default len is 10"
    echo " -r, --run            run Minecraft server, will attach into screen if server is running"
    echo "     --reboot         reboot Minecraft server"
    echo " -s, --status         view server status"
    echo "     --soft-link      make a soft-link for this shell"
    echo " -v, --version        version"
    echo ""
    echo " usage: \"ctrl + a + d\" to detach screen"
    echo ""
    echo "Quick Start:"
    echo "# minecraft-server --init"
    echo "# minecraft-server --forge"
    echo "# minecraft-server --soft-link"
    echo "# minecraft-server --create-crontab"
    echo "# minecraft-server --run"
    echo "# <ctrl + a + d>"
}

echo_version() {
    echo "server $MCSRV_NAME"
    echo "script-version $SCRIPT_VER"
}

#========== init ==========#

install_dependencies() {
    yum install -y screen java-1.8.0-openjdk-devel
    apt install -y screen openjdk-8-jre-headless
}

download_origin() {
    if [ ! -f "$ORIGIN_JAR" ]; then
        if [ ! -f "jar/$ORIGIN_JAR" ]; then
            wget $ORIGIN_URL
        else
            cp jar/$ORIGIN_JAR ./
        fi
    fi
}

download_forge() {
    if [ ! -f "$FORGE_INSTALL_JAR" ]; then
        if [ ! -f "jar/$FORGE_INSTALL_JAR" ]; then
            wget $FORGE_INSTALL_URL
        else
            cp jar/$FORGE_INSTALL_JAR ./
        fi
    fi
}

install_forge() {
    if [ -f "$FORGE_INSTALL_JAR" ]; then
        java -jar $FORGE_INSTALL_JAR --installServer
    fi
}

backup_jar() {
    mkdir -p jar/
    mv *.jar jar/
    cp jar/$FORGE_SERVER_JAR ./$MCSRV_JAR
}

agree_eula() {
    if [ ! -f "eula.txt" ]; then
        echo "eula=true" > eula.txt
    fi
}

#========== server ==========#

run_server() {
    PID=`ps -ef | grep $MCSRV_JAR | grep -v -E 'grep|SCREEN' | awk '{printf $2}'`
    if [ -n "$PID" ]; then
        echo "server is running"
    else
        screen -R $MCSRV_NAME java -Xms${XMS} -Xmx${XMX} -jar $MCSRV_JAR nogui
    fi
}

kill_server() {
    PID=`ps -ef | grep $MCSRV_JAR | grep -v -E 'grep|SCREEN' | awk '{printf $2}'`
    if [ -n "$PID" ]; then
        nohub kill -9 $PID > /dev/null 2>&1 &
        nohup screen -X -S $MCSRV_NAME quit > /dev/null 2>&1 &
        echo "server has been killed"
    else
        echo "server is not running"
    fi
}

server_status() {
    PID=`ps -ef | grep $MCSRV_JAR | grep -v -E 'grep|SCREEN' | awk '{printf $2}'`
    if [ -n "$PID" ]; then
        echo "server is running"
        ps u -p $PID
        screen -ls | grep $MCSRV_NAME
    else
        echo "server is not running"
    fi
}

attach_screen() {
    SCREEN_CNT=`screen -ls | grep $MCSRV_NAME | wc -l`
    if [ $SCREEN_CNT -eq 1 ]; then
        screen -r $MCSRV_NAME
    elif [ $SCREEN_CNT -gt 1 ]; then
        echo "multi server screen"
        screen -ls | grep $MCSRV_NAME
    elif [ $SCREEN_CNT -lt 1 ]; then
        echo "server screen not running"
    fi
}

#========== backup ==========#

backup() {
    mkdir -p backup/
    TIME=`date "+%Y-%m-%d"`
    BKFOLDER=${TIME}-backup/
    BKFILE=backup/${TIME}-backup.tar.gz

    rm -fr $BKFOLDER
    mkdir -p $BKFOLDER
    
    cp -r world/ $BKFOLDER
    cp -r config/ $BKFOLDER
    cp *.json $BKFOLDER
    cp *.properties $BKFOLDER
    cp server-icon.png $BKFOLDER
    cp $0 $BKFOLDER

    tar zcvf $BKFILE $BKFOLDER
    cp backup/${TIME}-backup.tar.gz backup/latest-backup.tar.gz
    rm -fr $BKFOLDER

    /usr/local/bin/ossutil64 cp -r $BKFILE oss://sang-mcbk/ -u
}

backup_clean() {
    cd backup
    FILE_CNT=`ls -l | grep -v total | wc -l`
    if [ $FILE_CNT -gt $MAX_BAK_CNT ]; then
        OVER_CNT=`expr $FILE_CNT - $MAX_BAK_CNT`
        echo "will clean up old file ($OVER_CNT)"
        ls -tr | grep -v total | head -$OVER_CNT | xargs -i -n1 rm -f {}
    fi
}

#========== operation ==========#

soft_link() {
    rm -f /usr/local/bin/minecraft-server
    ln -s $MCSRV_PATH/minecraft-server /usr/local/bin/minecraft-server
    echo "Soft-link finished!"
}

create_crontab() {
    echo "0 6 * * * root /usr/local/bin/minecraft-server -b" > /etc/cron.d/minecraft-server-backup
    echo "Create crontab finished! Will auto backup at 06:00am"
}

drop_caches() {
    free -h | grep Mem
    sync; echo 1 > /proc/sys/vm/drop_caches
    sync; echo 2 > /proc/sys/vm/drop_caches
    sync; echo 3 > /proc/sys/vm/drop_caches
    free -h | grep Mem
}

#========== log ==========#

tail_log() {
    if [ $# -gt 1 ]; then
        tail -f logs/latest.log -n $2
    else
        tail -f logs/latest.log
    fi
}

logserver() {
    PID=`ps -ef | grep logserver | grep -v 'grep' | awk '{printf $2}'`
    if [ -n "$PID" ]; then
        echo "logserver is running"
    else
        cd logserver
        nohup ./logserver > logserver.log 2>&1 &
        echo "logserver start"
        cd -
    fi
}

#========== option ==========#

OPT=$1
if [ $# == 0 ]; then
    $0 --help
    exit
fi

cd $MCSRV_PATH
case "$OPT" in
    "-h");&
    "--help")
        echo_help
        ;;
    "-v");&
    "--version")
	echo_version
        ;;
    "-i");&
    "--init")
        install_dependencies
        agree_eula
        ;;
    "--forge")
        download_origin
        download_forge
        install_forge
        backup_jar
        ;;
    "-r");&
    "--run")
        run_server
        logserver
        ;;
    "-k");&
    "--kill")
        kill_server
        ;;
    "--reboot")
        kill_server
        sleep 1
        run_server
        logserver
        ;;
    "-s");&
    "--status")
        server_status
        ;;
    "-a");&
    "--attach")
        attach_screen
        ;;
    "-b");&
    "--backup")
        backup
        backup_clean
        ;;
    "-l");&
    "--log")
        tail_log $2
        ;;
    "--soft-link")
        soft_link
        ;;
    "--create-crontab")
        create_crontab
        ;;
    "--drop-caches")
        drop_caches
        ;;
    *)
        ;;
esac
